import {Component, OnInit, AfterViewInit, ElementRef, ViewChild} from '@angular/core';
import {DialogService} from "../../../lib/service/system/dialog.service";
import {LoadJs} from "../../../lib/utils/LoadJs";
import {UtilsBase} from "../../../lib/utils/UtilsBase";
import {RouterService} from 'src/app/lib/service/router/RouterService';
import {HttpClient} from '@angular/common/http';

const client = UtilsBase.getClient();


import * as THREE from 'three';


@Component({
  selector: 'sk-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit, AfterViewInit {
  @ViewChild("canvasCon") canvasCon: ElementRef;
  @ViewChild("outerBallCon") outerBallCon: ElementRef;

  THREE = THREE;

  threeInstance: {
    camera?: any,
    scene?: any,
    mesh?: any,
    ball?: any,
    renderer?: any
  } = {};

  // 模型
  percentComplete = 0;


  rotate: number = -2;

  front = [-10, 10];
  back = [170, 190];
  back2 = [-190, -170];

  isShowFront = false;
  isShowBack = false;

  constructor(private dialogService: DialogService,
              private httpClient: HttpClient,
              private routerService: RouterService) {

  }

  ngOnInit() {
    window['_this'] = this;
    window['THREE'] = THREE;
  }

  ngAfterViewInit(): void {

    this.loadInit().then(() => {
      this.initCamera();
      this.initScene();

      this.addInnerMesh();

      this.drawIcosahedron();
      this.addLight();
      this.addRenderer();
      this.addEvent();
      this.animate();


      this.httpClient.get("/assets/textures/leilin.json").subscribe((res) => {
        this.addJsonModel(res);
      });
    });
  }

  addEvent() {
    let _this = this;
    let touchData = {x0: 0, y0: 0, xt: 0, yt: 0};
    this.canvasCon.nativeElement.addEventListener('touchstart', startFunc);

    this.canvasCon.nativeElement.addEventListener('touchmove', moveFunc);

    function startFunc(e) {
      let touches = e.targetTouches;
      touchData.y0 = touchData.yt = touches[0].clientY;
      touchData.x0 = touchData.xt = touches[0].clientX;
    }

    function moveFunc(e) {
      let touches = e.targetTouches;
      touchData.yt = touches[0].clientY;
      touchData.xt = touches[0].clientX;
      _this.rotate += (touchData.xt - touchData.x0) / 500;
      touchData.x0 = touchData.xt;
      touchData.y0 = touchData.yt;
      console.log(Math.round(_this.rotate * 180 / Math.PI));
    }
  }

  async loadInit() {
    let folderPath = "/assets/threejs/";
    // await LoadJs(folderPath + "build/three.min.js");
    await LoadJs(folderPath + "js/loaders/MTLLoader.js");
    await LoadJs(folderPath + "js/loaders/OBJLoader.js");
  }

  animate() {

    requestAnimationFrame(() => {
      this.animate();
    });

    let threeInstance = this.threeInstance, r = this.rotate;

    threeInstance.mesh.rotation.y = r;
    threeInstance.renderer.render(threeInstance.scene, threeInstance.camera);

    this.checkShowMenu(r);
  }

  checkShowMenu(r) {

    let dr = (Math.round(r * 180 / Math.PI)) % 360;

    this.isShowFront = check(dr, this.front);
    this.isShowBack = check(dr, this.back) || check(dr, this.back2);

    function check(value, array) {
      return value > array[0] && value < array[1];
    }
  }

  initCamera() {
    let camera = new THREE.PerspectiveCamera(70, client.width / client.width, 1, 1000);
    camera.position.z = 100;
    camera.position.x = 0;
    this.threeInstance.camera = camera;
  }

  initScene(): void {
    this.threeInstance.scene = new this.THREE.Scene();
  }

  /**
   * 绘制正二十面体
   */
  /**
   * 绘制正二十面体
   */
  drawIcosahedron() {
    let color = 0xffffff;
    // 定义一个容器
    let spGroup = new THREE.Object3D();

    // 定点坐标
    let vertices = getVertices();

    addSphere();

    addCylindGeometry();

    this.threeInstance.mesh.add(spGroup);

    // // // 设置球体的值
    // let radius = 50, segemnt = 16, rings = 16;
    //
    // let sphereMaterial = new THREE.MeshLambertMaterial({ color: 0xCC0000 });
    //
    // let sphere = new THREE.Mesh(
    //   new THREE.SphereGeometry(radius, segemnt, rings),
    //   sphereMaterial
    // );
    //
    // this.threeInstance.scene.add(sphere);

    // 生成模型，添加到场景当中
    function getVertices() {
      let scale = 50;
      let X = 0.525731112119133606 * scale;
      let Z = 0.85065080835203993 * scale;

      // 而是面体的坐标
      let positions = [
        [-X, 0.0, Z],
        [X, 0.0, Z],
        [-X, 0.0, -Z],
        [X, 0.0, -Z],
        [0.0, Z, X],
        [0.0, Z, -X],
        [0.0, -Z, X],
        [0.0, -Z, -X],
        [Z, X, 0.0],
        [-Z, X, 0.0],
        [Z, -X, 0.0],
        [-Z, -X, 0.0]
      ];

      let result = [], position;

      for (let i = 0; i < positions.length; i++) {
        position = positions[i];
        result.push(new THREE.Vector3(position[0], position[1], position[2]));
      }

      return result;
    }

    // 生成顶点球体
    function addSphere() {
      let r = 1;
      let vertice, geometry = new THREE.SphereGeometry(r, 40, 40), mesh;

      let cubeMaterial = new THREE.MeshDepthMaterial();
      let colorMaterial = new THREE.MeshBasicMaterial({
        color,
        transparent: false
      });

      for (let i = 0; i < 12; i++) {
        vertice = vertices[i];
        mesh = new THREE.Mesh(geometry, colorMaterial);
        mesh.position.x = vertice.x;
        mesh.position.y = vertice.y;
        mesh.position.z = vertice.z;

        spGroup.add(mesh);
      }
    }

    function createMultiMaterialObject( geometry, materials ) {
      let group = new THREE.Group();
      for ( let i = 0, l = materials.length; i < l; i ++ ) {
        group.add( new THREE.Mesh( geometry, materials[ i ] ) );
      }
      return group;
    }

    function addCylindGeometry() {
      // 面
      let draws = [], face;
      let indices = [
        [0, 4, 1],
        [0, 9, 4],
        [9, 5, 4],
        [4, 5, 8],
        [4, 8, 1],
        [8, 10, 1],
        [8, 3, 10],
        [5, 3, 8],
        [5, 2, 3],
        [2, 7, 3],
        [7, 10, 3],
        [7, 6, 10],
        [7, 11, 6],
        [11, 0, 6],
        [0, 1, 6],
        [6, 1, 10],
        [9, 0, 11],
        [9, 11, 2],
        [9, 2, 5],
        [7, 2, 11]
      ];

      for (let i = 0; i < indices.length; i++) {
        face = indices[i];
        draw(face[0], face[1]);
        draw(face[1], face[2]);
        draw(face[0], face[2]);
      }

      function draw(p1, p2) {
        if (draws.indexOf(p1 + p2 + '') === -1 && draws.indexOf(p2 + p1 + '')) {
          spGroup.add(createCylinderByTwoPoints2(vertices[p1], vertices[p2]));
          // draws.push(p1 + p2 + '');
        }
      }
    }


    function createCylinderByTwoPoints2(vstart, vend) {
      // https://stackoverflow.com/questions/15139649/three-js-two-points-one-cylinder-align-issue/15160850#15160850
      let HALF_PI = Math.PI * .5;
      let r = 0.2;
      let distance = vstart.distanceTo(vend);  // 短一点的立方体
      let position = vend.clone().add(vstart).divideScalar(2);
      console.log("pos", position);

      let material = new THREE.MeshLambertMaterial({
        color: 0xffffff
      });
      let cylinder = new THREE.CylinderGeometry(r, r, distance, 20, 20, false);

      let orientation = new THREE.Matrix4(); // a new orientation matrix to offset pivot
      let offsetRotation = new THREE.Matrix4(); //  matrix to fix pivot rotation
      let offsetPosition = new THREE.Matrix4(); // a matrix to fix pivot position
      orientation.lookAt(vstart, vend, new THREE.Vector3(0, 1, 0)); // look at destination
      offsetRotation.makeRotationX(HALF_PI); // rotate 90 degs on X
      orientation.multiply(offsetRotation); // combine orientation with rotation transformations
      cylinder.applyMatrix(orientation);

      let mesh = new THREE.Mesh(cylinder, material);
      mesh.position.set(position.x, position.y, position.z);
      return mesh;
    }
  }

  generateSprite() {
    let canvas = document.createElement('canvas');
    canvas.width = 16;
    canvas.height = 16;

    let context = canvas.getContext('2d');
    context.fillStyle = 'rgba(255, 255, 255, 0)';

    let gradient = context.createRadialGradient(canvas.width / 2,
      canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
    gradient.addColorStop(0, 'rgba(255,255,255,1)');
    gradient.addColorStop(0.2, 'rgba(0,255,255,1)');
    gradient.addColorStop(0.4, 'rgba(0,0,64,1)');
    gradient.addColorStop(1, 'rgba(0,0,0,0)');

    context.fillStyle = gradient;
    context.fillRect(0, 0, canvas.width, canvas.height);

    let texture = new THREE.Texture(canvas);
    texture.needsUpdate = true;
    return texture;
  }

  addInnerMesh() {
    // 创建球体 半径 精度份数 纬度份数
    let geometry = new THREE.SphereGeometry(30, 100, 100);

    let texture = new THREE.TextureLoader().load('/assets/textures/star/inner.png');

    let material = new THREE.MeshBasicMaterial({
      map: texture,  // 贴图
      wireframe: false, // 是否渲染边框
      color: 0x07335d,
      transparent: false // 透明
    });

    // 创建三维网格
    let mesh = new THREE.Mesh(geometry, material);
    mesh.position.x = 0;
    mesh.position.y = 0;
    mesh.position.z = 1;

    // 网格添加进入场景
    this.threeInstance.scene.add(mesh);
    this.threeInstance.mesh = mesh;
  }

  addLight() {
    // light--这里使用环境光
    let scene = this.threeInstance.scene;

    // 环境光
    let ambient = new THREE.AmbientLight(0xffffff);
    scene.add(ambient);

    /*点光源*/
    let directionalLight = new THREE.PointLight(0xb4e3f3);
    directionalLight.position.set(0, 0, 100).normalize();
    scene.add(directionalLight);
  }

  addRenderer() {
    let renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});
    renderer.setPixelRatio(1);
    renderer.setSize(client.width, client.width);
    this.canvasCon.nativeElement.appendChild(renderer.domElement);

    this.threeInstance.renderer = renderer;

    renderer.render(this.threeInstance.scene, this.threeInstance.camera);
  }

  // 记载进度
  onProgress(xhr) {
    if (xhr.lengthComputable) {
      this.percentComplete = xhr.loaded / xhr.total * 100;
    }
  }

  add() {
  }

  addJsonModel(obj) {

    // 加载json模型
    let loader = new this.THREE.ObjectLoader();

    // 格式化网格
    let loaderMesh = loader.parse(obj);
    loaderMesh.position.z = -1;
    loaderMesh.scale.x = loaderMesh.scale.y = loaderMesh.scale.z = 0.004;

    this.threeInstance.mesh.add(loaderMesh);
  }

  addShader() {
    let width = window.innerWidth; // 画布的宽度
    let height = window.innerHeight; // 画布的高度

    // 渲染器
    let renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});
    renderer.setSize(width, height);
    // 将canvas添加到指定元素
    this.canvasCon.nativeElement.appendChild(renderer.domElement);

    // 场景
    let scene = new THREE.Scene();
    // 摄像机
    let camera = new THREE.PerspectiveCamera(45, width / height, 1, 2000);
    camera.position.set(0, 0, 100);
    scene.add(camera);

    // 环境光
    let ambient = new THREE.AmbientLight(0xffffff);
    scene.add(ambient);

    /*点光源*/
    let directionalLight = new THREE.PointLight(0xb4e3f3);
    directionalLight.position.set(0, 0, 100).normalize();
    scene.add(directionalLight);

    let geom = new THREE.IcosahedronGeometry(20, 2);
    let material = new THREE.MeshBasicMaterial ({
      color: 0xffffff,
      transparent: true,
      side: THREE.DoubleSide,
      wireframe: true
    });

    let mesh = new THREE.Mesh(geom, material);
    scene.add(mesh);

    renderer.render(scene, camera);

    /* 利用requestAnimationFrame实现动画 */
    let clock = new THREE.Clock(); // 时钟
    (function animate() {
      requestAnimationFrame( animate );
      renderer.render( scene, camera ); // 重新渲染
    })();

  }

  gotoPage(type) {
    switch (type) {
      case 'buy':
        this.routerService.gotoCarPrice();
        break;

      case 'reserve':
        this.routerService.gotoReserve();
        break;

      case 'view':
        // this.routerService.gotoReserve();
        break;
    }
  }
}
